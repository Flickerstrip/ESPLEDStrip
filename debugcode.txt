  /*
  //ESP AP configuration code
  WiFi.disconnect();
  delay(100);
  WiFi.mode(WIFI_AP);
  WiFi.begin(configssid, "");
  WiFi.disconnect();
  delay(100);
  WiFi.mode(WIFI_AP);
  WiFi.softAP(configssid);
  WiFi.printDiag(Serial);
  delay(1000);
  Serial.println("beginning tcp server");
  tcpserver.begin();
  while(1) {
    WiFiClient client = tcpserver.available();
    if (!client) {
      continue;
    }
    
    // Wait until the client sends some data
    Serial.println("new client");
    int i=0;
    while(!client.available()) yield();
    Serial.println("data incoming..");
    while(client.available()){
      buf[i++] = client.read();
      delay(0);
    }
    buf[i] = 0;
    Serial.println("buffer:");
    Serial.println(buf);
    
    char * a = strstr(buf,"\n");
    a[0] = 0;
    
    a = strstr(buf,"ssid=");
    if (a != NULL) {
      a += 5;
      char * b = strstr(a,"&");
      if (b == NULL) break;
      b[0] = 0;
      strcpy(myssid,a);
      Serial.print("ssid: ");
      Serial.println(myssid);

      a = strstr(b+1,"password=");
      if (a == NULL) break;
      a += 9;
      b = strstr(a," ");
      if (b == NULL) break;
      b[0] = 0;
      strcpy(mypassword,a);
      Serial.print("pasword: ");
      Serial.println(mypassword);
      
      break;
    }
    
    String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\n";
    s += "<form method='GET' action='/'>";
    s += "<input name='ssid'>";
    s += "<input name='password'>";
    s += "<input type='submit'>";
    s += "</form>";
    s += "</html>\n";
  
    // Send the response to the client
    client.print(s);
    delay(1);
    Serial.println("Client disonnected");

    yield();
  }
  */
  
    /*
  delay(5000);
  Serial.println("testing flash memroy");
  //test flash
  int dblen = 300;
  for (int i=0; i<dblen; i++) {
    buf[i] = i;
  }
  flash.writeBytes(0,(byte*)buf,dblen);

  dumpPage(0x0);
  dumpPage(0x100);
  
  flash.readBytes(200,(byte*)buf,100);
  for (int i=0; i<100; i++) {
    if (i % 16 == 0 && i != 0) Serial.println();
    Serial.print("0x");
    if (buf[i] < 0x10) Serial.print("0");
    Serial.print(buf[i],HEX);
    Serial.print(" ");
  }
  Serial.println();

  while(true) {    
    delay(1000);
  }
  //test flash
  */


  /*
  byte r,g,b;
  for (uint16_t i=0; i<stripLength; i++) {
    if (i % 3 == 0) {
      r = 5;
      g = 0;
      b = 0;
    } else if (i % 3 == 1) {
      r = 0;
      g = 5;
      b = 0;
    } else if (i % 3 == 2) {
      r = 0;
      g = 0;
      b = 5;
    }
    leds[i*3] = r;
    leds[i*3+1] = g;
    leds[i*3+2] = b;
  }
  */
  

/*  
  char foo[] = "foo";
  memcpy(patterns[0].name, foo, 4);
  patternCount = 1;
//  patterns[0].name = foo;
  patterns[0].address = 0x300;
  patterns[0].len = 10*3*2;
  patterns[0].frames = 2;
  patterns[0].flags = 0;
  patterns[0].fps = 1;
  Serial.print("writing: ");
  Serial.println(sizeof(PatternMetadata));
  for (int i=0; i<sizeof(PatternMetadata); i++) {
    Serial.print((((byte *)patterns)[i]),HEX);
    Serial.print(" ");
  }
  Serial.println();
  flash.writeBytes(0x100,(byte *)patterns,sizeof(PatternMetadata));
  dumpPage(0x100);
  
  for (int i=0; i<10; i++) {
    buf[i*3+0] = 10;
    buf[i*3+1] = 10;
    buf[i*3+2] = 10;
  }
  for (int i=0; i<10; i++) {
    buf[30+i*3+0] = 10;
    buf[30+i*3+1] = 0;
    buf[30+i*3+2] = 0;
  }
  
  flash.writeBytes(patterns[0].address,(byte *)buf,patterns[0].len);
  dumpPage(0x300);
  */

  /*
  
  Serial.print("new pat index: ");
  Serial.println(newpatindex);
  
  Serial.print("address: ");
  Serial.println((&patterns[selectedPattern])->address);
  Serial.print("len: ");
  Serial.println((&patterns[selectedPattern])->len);
  Serial.print("name: ");
  Serial.println((&patterns[selectedPattern])->name);
  Serial.print("fps: ");
  Serial.println((&patterns[selectedPattern])->fps);

  
void dumpPage(uint16_t addr) {
  flash.readBytes(addr,(byte*)buf,256);
  Serial.print("Page: 0x");
  Serial.println(addr,HEX);
  for (int i=0; i<256; i++) {
    if (i % 16 == 0 && i != 0) Serial.println();
    Serial.print("0x");
    if (buf[i] < 0x10) Serial.print("0");
    Serial.print(buf[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
}

  while(1) {
    if (Serial.available()) {
      while(Serial.available()) Serial.read();
      selectedPattern ++;
      if (selectedPattern > 1) selectedPattern = 0;
      for (int i=0; i<sizeof(PatternMetadata); i++) {
        Serial.print((((byte *)(&patterns[selectedPattern]))[i]),HEX);
        Serial.print(" ");
      }
      Serial.println();
      Serial.print("address: ");
      Serial.println((&patterns[selectedPattern])->address);
      Serial.print("len: ");
      Serial.println((&patterns[selectedPattern])->len);
      Serial.print("name: ");
      Serial.println((&patterns[selectedPattern])->name);
      Serial.print("fps: ");
      Serial.println((&patterns[selectedPattern])->fps);
    }
    patternTick();
    strip.sendLeds(leds);
    delay(1000);
  }
  
  
  */
   
